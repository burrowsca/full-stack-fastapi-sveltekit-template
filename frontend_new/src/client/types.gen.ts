// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: string | null;
};

export type ItemPublic = {
    title: string;
    description?: string | null;
    id: number;
    owner_id: number;
};

export type ItemUpdate = {
    title?: string | null;
    description?: string | null;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    id: number;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: string | null;
};

export type UserUpdate = {
    email?: string | null;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    password?: string | null;
};

export type UserUpdateMe = {
    full_name?: string | null;
    email?: string | null;
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginAccessTokenResponse = Token;

export type TestTokenResponse = UserPublic;

export type RecoverPasswordData = {
    email: string;
};

export type RecoverPasswordResponse = Message;

export type ResetPasswordData = {
    requestBody: NewPassword;
};

export type ResetPasswordResponse = Message;

export type RecoverPasswordHtmlContentData = {
    email: string;
};

export type RecoverPasswordHtmlContentResponse = string;

export type ReadUsersData = {
    limit?: number;
    skip?: number;
};

export type ReadUsersResponse = UsersPublic;

export type CreateUserData = {
    requestBody: UserCreate;
};

export type CreateUserResponse = UserPublic;

export type ReadUserMeResponse = UserPublic;

export type DeleteUserMeResponse = Message;

export type UpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UpdateUserMeResponse = UserPublic;

export type UpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UpdatePasswordMeResponse = Message;

export type RegisterUserData = {
    requestBody: UserRegister;
};

export type RegisterUserResponse = UserPublic;

export type ReadUserByIdData = {
    userId: number;
};

export type ReadUserByIdResponse = UserPublic;

export type UpdateUserData = {
    requestBody: UserUpdate;
    userId: number;
};

export type UpdateUserResponse = UserPublic;

export type DeleteUserData = {
    userId: number;
};

export type DeleteUserResponse = Message;

export type TestEmailData = {
    emailTo: string;
};

export type TestEmailResponse = Message;

export type ReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ReadItemsResponse = ItemsPublic;

export type CreateItemData = {
    requestBody: ItemCreate;
};

export type CreateItemResponse = ItemPublic;

export type ReadItemData = {
    id: number;
};

export type ReadItemResponse = ItemPublic;

export type UpdateItemData = {
    id: number;
    requestBody: ItemUpdate;
};

export type UpdateItemResponse = ItemPublic;

export type DeleteItemData = {
    id: number;
};

export type DeleteItemResponse = Message;

export type $OpenApiTs = {
    '/api/v1/login/access-token': {
        post: {
            req: LoginAccessTokenData;
            res: {
                /**
                 * Successful Response
                 */
                200: Token;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/login/test-token': {
        post: {
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
            };
        };
    };
    '/api/v1/password-recovery/{email}': {
        post: {
            req: RecoverPasswordData;
            res: {
                /**
                 * Successful Response
                 */
                200: Message;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/reset-password/': {
        post: {
            req: ResetPasswordData;
            res: {
                /**
                 * Successful Response
                 */
                200: Message;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/password-recovery-html-content/{email}': {
        post: {
            req: RecoverPasswordHtmlContentData;
            res: {
                /**
                 * Successful Response
                 */
                200: string;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/': {
        get: {
            req: ReadUsersData;
            res: {
                /**
                 * Successful Response
                 */
                200: UsersPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CreateUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/me': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
            };
        };
        delete: {
            res: {
                /**
                 * Successful Response
                 */
                200: Message;
            };
        };
        patch: {
            req: UpdateUserMeData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/me/password': {
        patch: {
            req: UpdatePasswordMeData;
            res: {
                /**
                 * Successful Response
                 */
                200: Message;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/signup': {
        post: {
            req: RegisterUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/{user_id}': {
        get: {
            req: ReadUserByIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: UpdateUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: Message;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/utils/test-email/': {
        post: {
            req: TestEmailData;
            res: {
                /**
                 * Successful Response
                 */
                201: Message;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/items/': {
        get: {
            req: ReadItemsData;
            res: {
                /**
                 * Successful Response
                 */
                200: ItemsPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CreateItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: ItemPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/items/{id}': {
        get: {
            req: ReadItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: ItemPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        put: {
            req: UpdateItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: ItemPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: Message;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};